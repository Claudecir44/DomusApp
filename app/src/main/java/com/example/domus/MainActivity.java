package com.example.domus;

import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.Handler;
import android.widget.LinearLayout;
import android.util.Log;
import android.widget.Toast;
import android.widget.ImageView;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.drawable.Drawable;

import java.net.HttpURLConnection;
import java.net.URL;

public class MainActivity extends AppCompatActivity {

    private LinearLayout layoutBotoes;
    private static final String TAG = "DomusMain";
    private SupabaseSyncManager syncManager;
    private BDCondominioHelper dbHelper;
    private ImageView imageSplash;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Log.d(TAG, "üî•üî•üî• MAIN ACTIVITY - ONCREATE INICIADO üî•üî•üî•");

        try {
            inicializarComponentesBasicos();
            Log.d(TAG, "‚úÖ‚úÖ‚úÖ COMPONENTES B√ÅSICOS INICIALIZADOS ‚úÖ‚úÖ‚úÖ");

            executarDiagnosticoCritico();
            new Handler().postDelayed(this::showUserChoiceDialog, 1000);
            inicializarSincronizacaoSegura();

        } catch (Exception e) {
            Log.e(TAG, "üí•üí•üí• ERRO CR√çTICO NO ONCREATE: " + e.getMessage(), e);
            mostrarToast("Erro ao iniciar app: " + e.getMessage());

            new Handler().postDelayed(this::showUserChoiceDialog, 2000);
        }
    }

    // M√©todo que estava faltando, inicializa membros principais
    private void inicializarComponentesBasicos() {
        Log.d(TAG, "üîß INICIALIZANDO COMPONENTES B√ÅSICOS");

        try {
            imageSplash = findViewById(R.id.imageSplash); // assegure que o layout tem este ID
            layoutBotoes = findViewById(R.id.layoutBotoes);
            Log.d(TAG, "‚úÖ Componentes de layout encontrados");
        } catch (Exception e) {
            Log.e(TAG, "‚ùå ERRO ao encontrar componentes: " + e.getMessage());
        }

        try {
            syncManager = new SupabaseSyncManager(this);
            Log.d(TAG, "‚úÖ SupabaseSyncManager criado");
        } catch (Exception e) {
            Log.e(TAG, "‚ùå ERRO ao criar SyncManager: " + e.getMessage());
            syncManager = null;
        }

        try {
            dbHelper = new BDCondominioHelper(this);
            Log.d(TAG, "‚úÖ BDCondominioHelper criado");
            testarConexaoBanco();
        } catch (Exception e) {
            Log.e(TAG, "‚ùå ERRO ao criar DB Helper: " + e.getMessage());
            dbHelper = null;
        }
    }

    // M√©todo para testar conex√£o com banco local SQLite
    private void testarConexaoBanco() {
        if (dbHelper == null) return;

        try {
            SQLiteDatabase db = dbHelper.getReadableDatabase();
            boolean isOpen = db.isOpen();
            db.close();
            Log.d(TAG, "üóÉÔ∏è Conex√£o com banco: " + (isOpen ? "‚úÖ OK" : "‚ùå FALHA"));
        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao testar banco: " + e.getMessage());
        }
    }

    // M√©todo para testar conex√£o com Supabase chamando o m√©todo do SyncManager
    private void testarConexaoSupabase() {
        if (syncManager != null) {
            syncManager.testarConexao();
        } else {
            Log.e(TAG, "SyncManager est√° null, n√£o √© poss√≠vel testar conex√£o Supabase");
        }
    }

    // Seu restante do c√≥digo permanece igual, usando testarConexaoSupabase() onde necess√°rio

    // Exemplo: m√©todo que executa diagnose e chama testarConexaoSupabase()
    private void executarDiagnosticoCritico() {
        Log.d(TAG, "üîçüîçüîç DIAGN√ìSTICO CR√çTICO INICIADO üîçüîçüîç");

        Log.d(TAG, "üìã SyncManager: " + (syncManager != null ? "‚úÖ OK" : "‚ùå NULL"));
        Log.d(TAG, "üìã DB Helper: " + (dbHelper != null ? "‚úÖ OK" : "‚ùå NULL"));
        Log.d(TAG, "üìã Layout: " + (layoutBotoes != null ? "‚úÖ OK" : "‚ùå NULL"));

        // Outras verifica√ß√µes...

        testarConexaoSupabase();

        Log.d(TAG, "üîçüîçüîç DIAGN√ìSTICO CR√çTICO CONCLU√çDO üîçüîçüîç");
    }



// üîß VERIFICA√á√ÉO IMEDIATA DE REDE
    private void verificarRedeImediata() {
        try {
            ConnectivityManager cm = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
            NetworkInfo activeNetwork = cm != null ? cm.getActiveNetworkInfo() : null;

            if (activeNetwork != null && activeNetwork.isConnected()) {
                Log.d(TAG, "üåê‚úÖ REDE DISPON√çVEL: " + activeNetwork.getTypeName());
                Log.d(TAG, "üì∂ Conectado: " + activeNetwork.isConnected());
                Log.d(TAG, "üîó Tipo: " + getTipoRedeDetalhado(activeNetwork.getType()));
            } else {
                Log.e(TAG, "üåê‚ùå SEM CONEX√ÉO DE REDE");
                mostrarToast("‚ö†Ô∏è Sem conex√£o de internet - Sincroniza√ß√£o limitada");
            }
        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao verificar rede: " + e.getMessage());
        }
    }

    // üîß VERIFICA√á√ÉO DO BANCO DE DADOS
    private void verificarBancoDados() {
        if (dbHelper == null) {
            Log.e(TAG, "‚ùå DB Helper √© null - n√£o √© poss√≠vel verificar banco");
            return;
        }

        try {
            // Verificar se tabelas existem
            String[] tabelas = {
                    BDCondominioHelper.TABELA_MORADORES,
                    BDCondominioHelper.TABELA_USUARIOS_ADMIN,
                    BDCondominioHelper.TABELA_OCORRENCIAS
            };

            for (String tabela : tabelas) {
                boolean existe = dbHelper.tabelaExiste(tabela);
                int registros = dbHelper.contarRegistros(tabela);
                Log.d(TAG, "üóÉÔ∏è " + tabela + ": " + (existe ? "‚úÖ EXISTE" : "‚ùå AUSENTE") +
                        " | Registros: " + registros);
            }

        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao verificar banco: " + e.getMessage());
        }
    }

    // üîß VERIFICA√á√ÉO DE AUTENTICA√á√ÉO
    private void verificarAutenticacao() {
        if (syncManager == null) {
            Log.w(TAG, "‚ö†Ô∏è SyncManager null - pulando verifica√ß√£o de auth");
            return;
        }

        try {
            if (syncManager.isUsuarioLogado()) {
                Log.d(TAG, "üîê‚úÖ USU√ÅRIO AUTENTICADO: " + syncManager.getUsuarioEmail());
                Log.d(TAG, "üë§ Role: " + syncManager.getUserRole());
                Log.d(TAG, "üëë Admin: " + syncManager.isAdmin());
            } else {
                Log.w(TAG, "üîê‚ö†Ô∏è USU√ÅRIO N√ÉO AUTENTICADO");
                Log.d(TAG, "üí° Dica: Fa√ßa login para habilitar sincroniza√ß√£o em tempo real");
            }
        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao verificar autentica√ß√£o: " + e.getMessage());
        }
    }

    // Di√°logo para escolha de usu√°rio
    private void showUserChoiceDialog() {
        Log.d(TAG, "üí¨ MOSTRANDO DI√ÅLOGO DE ESCOLHA DE USU√ÅRIO");

        try {
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setTitle("üè† Bem-vindo ao Domus")
                    .setMessage("Como voc√™ deseja acessar o sistema?")
                    .setPositiveButton("üëë Administrador", (dialog, which) -> {
                        Log.d(TAG, "‚û°Ô∏è Usu√°rio escolheu: Administrador");
                        verificarEIrParaAdmin();
                    })
                    .setNegativeButton("üë• Morador", (dialog, which) -> {
                        Log.d(TAG, "‚û°Ô∏è Usu√°rio escolheu: Morador");
                        startActivity(new Intent(MainActivity.this, LoginMoradorActivity.class));
                    })
                    .setCancelable(false)
                    .show();

            Log.d(TAG, "‚úÖ Di√°logo de escolha exibido com sucesso");

        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao mostrar di√°logo: " + e.getMessage());
            // Fallback: ir direto para login de admin
            startActivity(new Intent(this, LoginAdminActivity.class));
        }
    }

    // üîß VERIFICAR E IR PARA TELA DE ADMIN CORRETA
    private void verificarEIrParaAdmin() {
        try {
            boolean adminExiste = isAdminRegistered();
            Log.d(TAG, "üîê Admin registrado localmente: " + adminExiste);

            if (!adminExiste) {
                Log.d(TAG, "‚û°Ô∏è Indo para LoginMasterActivity (primeiro admin)");
                startActivity(new Intent(MainActivity.this, LoginMasterActivity.class));
            } else {
                Log.d(TAG, "‚û°Ô∏è Indo para LoginAdminActivity (admin existente)");
                startActivity(new Intent(MainActivity.this, LoginAdminActivity.class));
            }
        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao verificar admin: " + e.getMessage());
            // Fallback para tela principal de admin
            startActivity(new Intent(this, LoginAdminActivity.class));
        }
    }

    // üîß SINCRONIZA√á√ÉO SEGURA (COM TRATAMENTO DE ERROS)
    private void inicializarSincronizacaoSegura() {
        Log.d(TAG, "üîÑ TENTANDO SINCRONIZA√á√ÉO SEGURA");

        if (syncManager == null) {
            Log.e(TAG, "‚ùå SyncManager null - pulando sincroniza√ß√£o");
            return;
        }

        // Verificar condi√ß√µes antes de sincronizar
        if (!syncManager.isUsuarioLogado()) {
            Log.w(TAG, "‚ö†Ô∏è Usu√°rio n√£o autenticado - sincroniza√ß√£o adiada");
            Log.d(TAG, "üí° Dica: Fa√ßa login como admin para habilitar sincroniza√ß√£o autom√°tica");
            return;
        }

        if (!isRedeDisponivel()) {
            Log.w(TAG, "‚ö†Ô∏è Sem rede - sincroniza√ß√£o adiada");
            return;
        }

        try {
            // Sincronizar ap√≥s 3 segundos
            new Handler().postDelayed(() -> {
                Log.d(TAG, "üîÑ INICIANDO SINCRONIZA√á√ÉO PRINCIPAL");
                syncManager.sincronizacaoRapida();

                // Verificar status ap√≥s sincroniza√ß√£o
                new Handler().postDelayed(this::verificarStatusAposSincronizacao, 3000);
            }, 3000);

        } catch (Exception e) {
            Log.e(TAG, "üí• Erro na sincroniza√ß√£o: " + e.getMessage());
        }
    }

    // üîß VERIFICAR STATUS AP√ìS SINCRONIZA√á√ÉO
    private void verificarStatusAposSincronizacao() {
        Log.d(TAG, "üìä STATUS P√ìS-SINCRONIZA√á√ÉO:");
        verificarStatusCompleto();
    }

    // Verifica se existe admin registrado
    private boolean isAdminRegistered() {
        if (dbHelper == null) {
            Log.e(TAG, "‚ùå DB Helper null - n√£o √© poss√≠vel verificar admin");
            return false;
        }

        try {
            boolean existe = dbHelper.existeAdmin();
            Log.d(TAG, "üîê Verifica√ß√£o de admin: " + existe);
            return existe;
        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao verificar admin: " + e.getMessage());
            return false;
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        Log.d(TAG, "üîÑ MAIN ACTIVITY - ONRESUME");

        // Atualizar diagn√≥stico ao retornar
        new Handler().postDelayed(() -> {
            Log.d(TAG, "üîç ATUALIZANDO DIAGN√ìSTICO AO RETORNAR");
            verificarStatusCompleto();
        }, 1000);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "üõë MAIN ACTIVITY - ONDESTROY");

        if (dbHelper != null) {
            dbHelper.close();
        }
    }

    // üîß VERIFICAR SE REDE EST√Å DISPON√çVEL
    private boolean isRedeDisponivel() {
        try {
            ConnectivityManager cm = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
            NetworkInfo networkInfo = cm != null ? cm.getActiveNetworkInfo() : null;
            return networkInfo != null && networkInfo.isConnected();
        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao verificar rede: " + e.getMessage());
            return false;
        }
    }

    // üîß OBTER TIPO DE REDE DETALHADO
    private String getTipoRedeDetalhado(int tipo) {
        switch (tipo) {
            case ConnectivityManager.TYPE_WIFI:
                return "WiFi";
            case ConnectivityManager.TYPE_MOBILE:
                return "Dados M√≥veis";
            case ConnectivityManager.TYPE_ETHERNET:
                return "Ethernet";
            case ConnectivityManager.TYPE_VPN:
                return "VPN";
            default:
                return "Desconhecido (" + tipo + ")";
        }
    }

    // üîß MOSTRAR TOAST
    private void mostrarToast(String mensagem) {
        runOnUiThread(() -> Toast.makeText(this, mensagem, Toast.LENGTH_LONG).show());
    }

    // üîß FOR√áAR SINCRONIZA√á√ÉO MANUAL
    private void forcarSincronizacaoManual() {
        Log.d(TAG, "üîÑ SOLICITA√á√ÉO DE SINCRONIZA√á√ÉO MANUAL");

        if (syncManager == null) {
            Log.e(TAG, "‚ùå SyncManager null - n√£o √© poss√≠vel sincronizar");
            mostrarToast("Erro: Sistema n√£o inicializado corretamente");
            return;
        }

        if (!syncManager.isUsuarioLogado()) {
            Log.w(TAG, "‚ö†Ô∏è Usu√°rio n√£o autenticado");
            mostrarToast("üîê Fa√ßa login como administrador primeiro");
            return;
        }

        if (!isRedeDisponivel()) {
            Log.w(TAG, "‚ö†Ô∏è Sem conex√£o de rede");
            mostrarToast("üåê Sem conex√£o com a internet");
            return;
        }

        try {
            mostrarToast("üîÑ Iniciando sincroniza√ß√£o...");
            syncManager.sincronizacaoRapida();

            // Verificar resultado ap√≥s 5 segundos
            new Handler().postDelayed(() -> {
                mostrarToast("üìä Sincroniza√ß√£o em andamento...");
                verificarStatusCompleto();
            }, 5000);

        } catch (Exception e) {
            Log.e(TAG, "üí• Erro na sincroniza√ß√£o manual: " + e.getMessage());
            mostrarToast("‚ùå Erro na sincroniza√ß√£o");
        }
    }

    // üîß VERIFICAR STATUS COMPLETO
    private void verificarStatusCompleto() {
        Log.d(TAG, "üìä VERIFICA√á√ÉO DE STATUS COMPLETA");

        if (dbHelper == null) {
            Log.e(TAG, "‚ùå DB Helper null - n√£o √© poss√≠vel verificar status");
            return;
        }

        try {
            String[] tabelas = {
                    BDCondominioHelper.TABELA_USUARIOS_ADMIN,
                    BDCondominioHelper.TABELA_MORADORES,
                    BDCondominioHelper.TABELA_OCORRENCIAS,
                    BDCondominioHelper.TABELA_FUNCIONARIOS
            };

            String[] nomes = {"Admins", "Moradores", "Ocorr√™ncias", "Funcion√°rios"};

            for (int i = 0; i < tabelas.length; i++) {
                int count = dbHelper.contarRegistros(tabelas[i]);
                Log.d(TAG, "üìã " + nomes[i] + ": " + count + " registros locais");
            }

        } catch (Exception e) {
            Log.e(TAG, "üí• Erro ao verificar status: " + e.getMessage());
        }
    }

    // üîß M√âTODO P√öBLICO PARA ACTIVITIES FILHAS
    public void sincronizarAposInsercao() {
        Log.d(TAG, "üîÑ SINCRONIZA√á√ÉO P√ìS-INSER√á√ÉO SOLICITADA");

        if (syncManager != null && syncManager.isUsuarioLogado() && syncManager.isAdmin()) {
            new Handler().postDelayed(() -> {
                if (syncManager != null) {
                    syncManager.sincronizacaoRapida();
                    Log.d(TAG, "‚úÖ Sincroniza√ß√£o p√≥s-inser√ß√£o executada");
                }
            }, 1000);
        } else {
            Log.w(TAG, "‚ö†Ô∏è Sincroniza√ß√£o p√≥s-inser√ß√£o ignorada - sem permiss√£o");
        }
    }
}